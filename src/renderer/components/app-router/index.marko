import * as nameComponent from "../../pages/name"
import * as homeComponent from "../../pages/home"
import * as createComponent from "../../pages/create"
import * as joinComponent from "../../pages/join"
import * as loadingComponent from "../../pages/loading"
import * as lobbyComponent from "../../pages/lobby"
import { Router, history } from "marko-path-router"

class {

    onCreate() {
        this.state = {
            currentRoute: null,
            previousRoute: null
        };
    }

    onMount() {
        // Bind electron instance to component
        this.electron = window.require("electron");

        // Bring main process persistent storage to browser
        this.initLocalStorageState();

        const routes = [
            { path: "/name", component: nameComponent },
            { path: "/loading", component: loadingComponent },
            { path: "/home", component: homeComponent },
            { path: "/create", component: createComponent },
            { path: "/join", component: joinComponent },
            { path: "/lobby", component: lobbyComponent }
        ];

        const render = Router.renderSync({
             injectedInput: {
                state: this.state
            },
            routes: routes,
            initialRoute: this.initialRoute()
        });

        const router = this.router = render
            .appendTo(this.getEl("m-router"))
            .getComponent()

        router.beforeEach((from, to, next) => {
            const name = localStorage.getItem("user.name");
            if (!name) {
                history.replace("/name");
                console.log("BeforeEach hook. User name still pending");
                return next();
            }
            const support = localStorage.getItem("upnp.support");
            if (!support) {
                history.replace("/loading");
                console.log("BeforeEach hook. UPnP support still pending");
                return next();
            }
            console.log(`BeforeEach hook. Transitioning from ${from} to ${to}`);
            next();
        });

        router.afterEach((from, to) => {
            console.log(`AfterEach hook. Transitioning from ${from} to ${to}`)
        });

        router.on("update", () => {
            this.state.previousRoute = this.state.currentRoute;
            this.state.currentRoute = router.currentRoute;
        });
    }

    initialRoute() {
        const name = localStorage.getItem("user.name");
        const support = localStorage.getItem("upnp.support");
        switch (true) {
            case !name: return "/name";
            case !support: return "/loading";
            default: return "/home";
        }
    }

    initLocalStorageState() {
        this.hasUserName();
        this.hasUPnPSupport();
    }

    hasUserName() {
        const name = this.electron.ipcRenderer.sendSync("get-name-sync");
        console.log(`name: ${name}`);
        if (name) {
            localStorage.setItem("user.name", name);
            return true;
        }
        return false;
    }

    hasUPnPSupport() {
        const support = this.electron.ipcRenderer.sendSync("get-upnp-support-sync");
        console.log(`network support: ${support}`);
        if (support) {
            localStorage.setItem("upnp.support", support);
            return true;
        }
        return false;
    }
}

div id="router" key="m-router" no-update
